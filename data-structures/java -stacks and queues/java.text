Run in IntelliJ IDEA

================Stack ==============
public class Stack { //LIFO
  private int maxSize; //stack size
  private int[] stackArray; // elements themselves
  private int top; //top element of stack

  public Stack(int s) { //Constructor
    maxSize = s; //initialise stack with max size value
    stackArray = new int[s];
    top = -1; //java use zero-based indexing -> first element index 0 ,second index 1
  }

  public void push(int item) { //push() - accepts integer value to push
    if(top == maxSize -1) { //checking size of stack is full
    System.out.println("Stack is full ,cannot insert");
    }
    else {
      top++; //increment top value
      stackArray[top] = item; //insert item at that index in array
    }
  }

  public void pop() { //pop() - removes element from stack
    if(top == -1) { //checks if stack is empty
      System.out.println("Stack is empty ,cannot remove element");
    }
    else {
      System.out.println("Element popped: "+stackArray[top]);
      top--; //decrement the value
    }
  }

  public int peek() {
    //peek is a utility function that allows to view which element is at top currently
    return stackArray[top];
  }

  public static void main(String[] args) {
    Stack stack = new Stack(3);
    stack.push(10);
    System.out.println("Element inserted: "+stack.peek());
    stack.push(50);
    System.out.println("Element inserted: "+stack.peek());
    stack.push(25);
    System.out.println("Element inserted: "+stack.peek());
    stack.push(7);
    //System.out.println("Element inserted: "+stack.peek());
    stack.pop();
  }

}



===============Queue=============================
public class Queue {
  //Queue insertion - rear ,deletion -front
  private int maxSize; //max size
  private int[] queueArray; //array for queue
  private int front;
  private int rear;
  private int numOfItems; //count no of items

  public Queue(int s) {
    maxSize = s;
    queueArray = new int[s];
    front = 0;
    rear = -1;
    numOfItems = 0;
  }

  //Utiliy funcs - view the current item at rear and front
 public int peekFront(){
    return queueArray[front];
}
  public int peekRear(){
    return queueArray[rear];

  }
  //Check queue has any items or not
  public boolean checkEmpty() {
    return numOfItems == 0;
  }
  
  public boolean checkFull() {
    return numOfItems == maxSize;
  }

  public void enqueue(int item) {
    if(checkFull()) {
      System.out.println("Queue is full ,cannot insert");
    }
    else {
      rear++;
      queueArray[rear] = item; //append to that index
      numOfItems++; //increment no of items by 1
    }
  }

  public void dequeue() {
    if(checkEmpty()) {
      System.out.println("Queue is empty ,cannot remove element");
    }
    else {
      System.out.println("Queue dequeued "+queueArray[front]);
      front++;
      numOfItems--;
    }
  }
  
  public static void main(String[] args) {
    Queue queue = new Queue(3);
    queue.enqueue(10);
    System.out.println("Element inserted: "+queue.peekRear());
    queue.enqueue(50);
    System.out.println("Element inserted: "+queue.peekRear());
    queue.enqueue(25);
    System.out.println("Element inserted: "+queue.peekRear());
    queue.enqueue(7);
    //System.out.println("Element inserted: "+queue.peekRear());
    queue.dequeue();


  }
}

